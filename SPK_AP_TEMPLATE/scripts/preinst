#!/bin/sh
# Copyright (C) 2000-2020 Synology Inc. All rights reserved.

### This script is executed when the package is installed or upgraded.
### Actions performed before the package is installed (e.g. checking environment).

# Customized items of package
if [ -z "$SYNOPKG_PKGNAME" ]; then
    # Prior DSM 3.2, start script will be run without environment variables,
    # at boot time, thus we need a workaround to gather name and version info.
    PACKAGE_NAME="playitGG"
    PACKAGE_VER=`get_key_value "/var/packages/${PACKAGE_NAME}/INFO" "version"`
else
    PACKAGE_NAME=$SYNOPKG_PKGNAME
    PACKAGE_VER=$SYNOPKG_PKGVER
fi

PACKAGE_DIR="/var/packages/playitGG"
PACKAGE_DEST=$SYNOPKG_PKGDEST
PACKAGE_CONFIG_MIGRATE_SH="/usr/syno/bin/package_config_migrate.sh"
SERVICETOOL="/usr/syno/bin/servicetool"
SED="/bin/sed"

# Log, że skrypt został uruchomiony
echo "preinstal start: Rozpoczynam instalację..." >> /var/log/synopkg_debug.log

# Tworzenie folderu w /volume1/1, jeśli nie istnieje
mkdir -p /volume1/1/playitGG
mkdir -p /volume1/1/playitGG/LOG

# Sprawdzenie, czy folder został utworzony
if [ -d "/volume1/1/playitGG" ]; then
    echo "preinstal: Folder /volume1/1/playitGG utworzony pomyślnie" >> /volume1/1/playitGG/LOG/package_install.log
else
    echo "preinstal ERROR: Folder /volume1/1/playitGG nie został utworzony" >> /volume1/1/playitGG/LOG/package_install.log
fi

# Definicja funkcji instalującej userhook plugin (można rozszerzyć, jeśli potrzeba)
install_synosdk_userhook_plugin()
{
    local dlScriptsPach="${PACKAGE_DIR}/target/scripts"
    local destusercommon="/usr/local/libexec"
    local destuserset="/usr/local/libexec/user_set"
    local destuserdelete="/usr/local/libexec/user_delete"
    # Tutaj można dodać operacje kopiowania lub konfiguracji hooków.
}

# Wywołanie funkcji instalującej userhook plugin
install_synosdk_userhook_plugin

# Wywołanie głównego skryptu instalacyjnego (upewnij się, że plik install.sh znajduje się w odpowiedniej lokalizacji)
cd ${PACKAGE_DIR}
ls >> /volume1/1/playitGG/LOG/package_install.log


# Definicje plików logów
INSTALL_LOG="/volume1/1/playitGG/LOG/package_install.log"
LOG_FILE="/volume1/1/playitGG/LOG/playit.log"

# Zapisujemy rozpoczęcie instalacji
echo "Rozpoczynam instalację..." | tee -a "$INSTALL_LOG" "$LOG_FILE"

# Tworzenie katalogów docelowych, jeśli nie istnieją
echo "Tworzenie katalogów docelowych..." | tee -a "$INSTALL_LOG" "$LOG_FILE"
mkdir -p /var/packages/playitGG/target/bin
mkdir -p /var/packages/playitGG/target/config

# Kopiowanie plików binarnych do katalogu docelowego
echo "Kopiowanie plików binarnych do /var/packages/playitGG/target/bin/..." | tee -a "$INSTALL_LOG" "$LOG_FILE"
cp /tmp/packagedir/bin/* /var/packages/playitGG/target/bin/

# Kopiowanie plików konfiguracyjnych
echo "Kopiowanie plików konfiguracyjnych do /var/packages/playitGG/target/config/..." | tee -a "$INSTALL_LOG" "$LOG_FILE"
cp /tmp/packagedir/config/* /var/packages/playitGG/target/config/

# Ustawianie odpowiednich uprawnień do plików
echo "Ustawianie uprawnień do plików..." | tee -a "$INSTALL_LOG" "$LOG_FILE"
chown -R root:root /var/packages/playitGG/target/
chmod -R 755 /var/packages/playitGG/target/bin
chmod -R 644 /var/packages/playitGG/target/config

# Uruchomienie usługi po instalacji
echo "Uruchamiam usługę..." | tee -a "$INSTALL_LOG" "$LOG_FILE"
# Uruchamiamy binarkę w tle
/var/packages/playitGG/target/bin/playit-linux &

# Opcjonalnie: poczekaj kilka sekund, aby proces mógł się uruchomić
sleep 2

# Sprawdzenie, czy proces się uruchomił
if pgrep -f "playit-linux" > /dev/null; then
    echo "Usługa uruchomiona pomyślnie." | tee -a "$INSTALL_LOG" "$LOG_FILE"
else
    echo "Błąd uruchamiania usługi." | tee -a "$INSTALL_LOG" "$LOG_FILE"
fi

echo "Instalacja zakończona." | tee -a "$INSTALL_LOG" "$LOG_FILE"




