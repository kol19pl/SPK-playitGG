#!/bin/sh
# Copyright (C) 2000-2020 Synology Inc. All rights reserved.

### This script executes when the package is installed or upgraded.

# Package Information
# package specific install scripts must not use INST_LOG
INST_LOG="${SYNOPKG_PKGDEST}/var/${SYNOPKG_PKGNAME}_install.log"
INST_LOG_TEMP="/tmp/${SYNOPKG_PKGNAME}_install.log"

install_log ()
{
    local _msg_="$@"
    if [ -z "${_msg_}" ]; then
        # read multiline from stdin
        while IFS=$'\n' read -r line; do
            install_log "${line}"
        done
    else
        echo -e "$(date +'%Y/%m/%d %H:%M:%S')\t${_msg_}" >> ${INST_LOG_TEMP} 2>&1
    fi
}







    # Link for backward compatibility of binaries location
    $LN "${SYNOPKG_PKGDEST}" "/usr/local/${SYNOPKG_PKGNAME}" 2>&1 | install_log

    # Link for DSM7 forward compatibility of var location
    $LN "${SYNOPKG_PKGDEST}/var" "/var/packages/${SYNOPKG_PKGNAME}/var" 2>&1 | install_log

    # Add firewall config
  #  if [ -r "${FWPORTS_FILE}" ]; then
  #      install_log "Installing service configuration ${FWPORTS_FILE}"
  #      servicetool --install-configure-file --package "${FWPORTS_FILE}" 2>&1 | install_log
  #  fi

    # Service user management
    if [ -n "${EFF_USER}" ]; then
        # DSM 5 specific operations
        # Create prefixed synouser
        if ! cat /etc/passwd | grep "${EFF_USER}:x:" &> /dev/null; then
            synouser --add "${EFF_USER}" "" "$USER_DESC" 0 "" 0 2>&1 | install_log
            # Set HOME for consistency with DSM 6, location available even if homes not enabled
            BACKUP_PASSWD="/tmp/install_${SYNOPKG_PKGNAME}_passwd"
            cp /etc/passwd ${BACKUP_PASSWD} 2>&1 | install_log
            sed -i "s#/var/services/homes/${EFF_USER}#/var/packages/${SYNOPKG_PKGNAME}/target#" /etc/passwd 2>&1 | install_log
        fi
        # Register service in "users" group to access any content
        if [ "$ADD_USER_IN_USERS" = "yes" ]; then
            syno_user_add_to_group "${EFF_USER}" "users" 2>&1 | install_log
        fi
    fi

    # Only if a group is provided via UI or set by script
    if [ -n "$GROUP" ]; then
        # Check if group already exists
        if ! synogroup --get "$GROUP" &> /dev/null; then
            # Group does not exist yet: create with user as member
            syno_group_create "${EFF_USER}" 2>&1 | install_log
        fi
        if synogroup --get "$GROUP" &> /dev/null; then
            syno_user_add_to_group "${EFF_USER}" "${GROUP}" 2>&1 | install_log
        fi
        # Not sure but invoked with hope DSM is updated
        synogroup --rebuild all 2>&1 | install_log
    fi

    # Share management
    if [ -n "${SHARE_PATH}" ]; then
        # Create share if it does not exist
        # invalid characters: !"#$%&’()*+,/:;<=>?@[]nˆ`{} |
        if ! synoshare --get "${SHARE_NAME}" > /dev/null 2>&1; then
            SHARE_PATH=${SYNOPKG_PKGDEST_VOL}/${SHARE_NAME}
            install_log "Create share SHARE_NAME=${SHARE_NAME}, SHARE_PATH=${SHARE_PATH}"
            # mandatory arguments: 
            # name desc path na rw ro browseable adv_privilege 
            # na, rw and ro are list of user(s) and/or group(s), separated by comma
            synoshare --add "${SHARE_NAME}" "Share created for package ${SYNOPKG_PKGNAME}" "${SHARE_PATH}" "" "" "" 1 0  2>&1 | install_log
        else
            install_log "Share already exists SHARE_NAME=${SHARE_NAME}, SHARE_PATH=${SHARE_PATH}"
        fi

        # Add user permission if no GROUP is set in service-setup
        # GROUP permission will be added in set_syno_permissions
        if [ -z "$GROUP" ] && [ -n "${EFF_USER}" ]; then
            # check whether user is already added to RW users
            _synoshare_parameter="--getmap"
            if synoshare --getmap "${SHARE_NAME}" | grep "ACL.*\[yes\]" > /dev/null 2>&1; then
                _synoshare_parameter="--list_acl"
            fi
            if synoshare ${_synoshare_parameter} "${SHARE_NAME}" | grep "RW list" | grep -o "\[.*\]"  | sed  's/[\[,]/ /g' | sed 's/\]/ /g' | grep -q " ${EFF_USER} " > /dev/null 2>&1; then
                install_log "User has already RW access to share: SHARE_NAME=${SHARE_NAME}, EFF_USER=${EFF_USER}"
            else
                install_log "Set user for share: SHARE_NAME=${SHARE_NAME}, EFF_USER=${EFF_USER}"
                synoshare --setuser "${SHARE_NAME}" RW + "${EFF_USER}" 2>&1 | install_log
            fi
        fi
        synoshare --build 2>&1 | install_log

        # Permissions for folder, up to volume
        if [ -n "$GROUP" ]; then
            install_log "Set group for share: SHARE_PATH=${SHARE_PATH}, GROUP=${GROUP}"
            set_syno_permissions "${SHARE_PATH}" "${GROUP}" 2>&1 | install_log
        fi
    fi

    $MKDIR "${SYNOPKG_PKGVAR}" 2>&1 | install_log

 

   

    

    $CP "${INST_LOG_TEMP}" "${INST_LOG}" 2>&1 | install_log

    if [ -n "${LOG_FILE}" ]; then
        echo "Installation log: ${INST_LOG}" >> ${LOG_FILE}
    fi

    
    

    exit 0

