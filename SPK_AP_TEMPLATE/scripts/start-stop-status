#!/bin/sh

# Default display name
DNAME="${SYNOPKG_PKGNAME}"
LOG_FILE="${SYNOPKG_PKGVAR}/${SYNOPKG_PKGNAME}.log"



if [ "$SYNOPKG_DSM_VERSION_MAJOR" -lt 7 ]; then
    # Define SYNOPKG_PKGVAR for forward compatibility
    SYNOPKG_PKGVAR="${SYNOPKG_PKGDEST}/var"
fi

# Source package-specific variable and functions
SVC_SETUP=$(dirname $0)"/service-setup"
if [ -r "${SVC_SETUP}" ]; then
    . "${SVC_SETUP}"
fi




# Invoke shell function if available
call_func ()
{
    FUNC=$1
    if type "${FUNC}" 2>/dev/null | grep -q 'function' 2>/dev/null; then
        echo "Begin ${FUNC}" >> ${LOG_FILE}
        eval ${FUNC}         >> ${LOG_FILE}
        echo "End ${FUNC}"   >> ${LOG_FILE}
    fi
}

start_daemon ()
{
    echo "Starting daemon..." >> ${LOG_FILE}
    nohup ${SERVICE_COMMAND} >> ${LOG_FILE} 2>&1 &
    echo $! > ${PID_FILE}
}

stop_daemon ()
{
    if [ -f "${PID_FILE}" ]; then
        PID=$(cat ${PID_FILE})
        echo "Stopping daemon with PID ${PID}..." >> ${LOG_FILE}
        kill ${PID} && rm -f ${PID_FILE}
    fi
}

#------------------------------------------------------
# daemon_status()
#     $1: PID to check, if empty use ${PID_FILE}
# status: Keeps track of kill -0 exit status
#
# Return 0 when all pid are OK, else return 1
#------------------------------------------------------
daemon_status ()
{
    if [ -f "${PID_FILE}" ]; then
        PID=$(cat ${PID_FILE})
        if kill -0 ${PID} 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

#------------------------------------------------------
# wait_for_status()
#      $1: expected return from daemon_status() call
#      $2: timeout (e.g. number of loop to be done)
#      $3: PID to check being passed to daemon_status()
# counter: Number of 1sec iteration to wait until
#          the return value from daemon_status()
#          match expected value
#
# Wait for a duration of $counter seconds for the
# return value from daemon_status().  If it matches
# return 0 else return 1 if wait time is over.
#------------------------------------------------------
wait_for_status ()
{
    expected_status=$1
    timeout=$2
    counter=0
    while [ $counter -lt $timeout ]; do
        if daemon_status; then
            return 0
        fi
        sleep 1
        counter=$((counter + 1))
    done
    return 1
}

case $1 in
    start)
        if daemon_status; then
            echo "${DNAME} is already running" >> ${LOG_FILE}
            exit 0
        else
            echo "Starting ${DNAME} ..." >> ${LOG_FILE}
            start_daemon
            exit $?
        fi
        ;;
    stop)
        if daemon_status; then
            echo "Stopping ${DNAME} ..." >> ${LOG_FILE}
            stop_daemon
            exit $?
        else
            echo "${DNAME} is not running" >> ${LOG_FILE}
            exit 0
        fi
        ;;
    status)
        if daemon_status; then
            echo "${DNAME} is running"
            exit 0
        else
            echo "${DNAME} is not running"
            exit 3
        fi
        ;;
    log)
        # Log output for DSM < 6
        if [ -n "${LOG_FILE}" -a -r "${LOG_FILE}" ]; then
            # Shorten long logs to last 100 lines
            TEMP_LOG_FILE="${SYNOPKG_PKGVAR}/${SYNOPKG_PKGNAME}_temp.log"
            # Clear any previous log
            echo "Full log: ${LOG_FILE}" > "${TEMP_LOG_FILE}"
            tail -n100 "${LOG_FILE}" >> "${TEMP_LOG_FILE}"
            echo "${TEMP_LOG_FILE}"
        fi
        exit 0
        ;;
    *)
        exit 1
        ;;
esac

